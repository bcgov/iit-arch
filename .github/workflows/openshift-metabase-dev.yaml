# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# üíÅ The OpenShift Starter workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to:
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with 'üñäÔ∏è' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: openshift-metabase-dev

env:
  # üñäÔ∏è EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # üñäÔ∏è EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE_NO_ENV: ${{ secrets.NAMESPACE_NO_ENV}}


  # üñäÔ∏è EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: ""

  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  MB_ADMIN_EMAIL: ${{ secrets.MB_ADMIN_EMAIL }}
  METABASE_APP_PREFIX: ${{ secrets.METABASE_APP_PREFIX }}
  DOCKER_ARTIFACTORY_REPO: docker-remote.artifacts.developer.gov.bc.ca
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca

  APP_NAME: 'metabase'
  REPO_NAME: "nr-arch-templates"
  JOB_NAME: "main"
  NAMESPACE: ${{ secrets.NAMESPACE_NO_ENV }}
  TAG: "latest"
  TARGET_ENV: "dev"

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'Metabase/openshift/**'

jobs:
  openshift-ci-cd:
    name: Build and deploy to OpenShift
    runs-on: ubuntu-20.04
    environment: metabase-dev
    defaults:
      run:
        working-directory: Metabase

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v4
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };
            
            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }
            
            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`‚úîÔ∏è Secret "${name}" is set`);
              return false;
            });
            
            if (missingSecrets.length > 0) {
              core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`‚úÖ All the required secrets are set`);
            }

      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine image tags
        if: env.IMAGE_TAGS == ''
        run: |
          echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_ARTIFACTORY_REPO }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Metabase image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: "${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:latest"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: |
            ./Metabase/openshift/.pipeline/Dockerfile.openshift
          build-args: |
            METABASE_VERSION=v0.43.1
      - name: Build and push Backup image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: "${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/postgres-backup:v1"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: |
            ./Metabase/openshift/backup-container/Dockerfile
          build-args: |
            METABASE_VERSION=v0.43.1
#      - name: Build from Dockerfile
#        id: build-image
#        uses: redhat-actions/buildah-build@v2
#        with:
#          image: ${{ env.APP_NAME }}
#          tags: ${{ env.IMAGE_TAGS }}
#
#          # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
#          # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
#          # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
#          dockerfiles: |
#            ./Metabase/openshift/.pipeline/Dockerfile.openshift
#          build-args: |
#            METABASE_VERSION=v0.43.1
#
#      # https://github.com/redhat-actions/push-to-registry#readme
#      - name: Push to registry
#        id: push-image
#        uses: redhat-actions/push-to-registry@v2
#        with:
#          image: ${{ steps.build-image.outputs.image }}
#          tags: ${{ steps.build-image.outputs.tags }}
#          registry: ${{ env.IMAGE_REGISTRY }}
#          username: ${{ env.IMAGE_REGISTRY_USER }}
#          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
#
#      - name: Build Backup Container from Dockerfile
#        id: build-backup-image
#        uses: redhat-actions/buildah-build@v2
#        with:
#          image: 'postgres-backup'
#          tags: 'v1'
#
#          # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
#          # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
#          # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
#          dockerfiles: |
#            ./Metabase/openshift/backup-container/Dockerfile
#
#      # https://github.com/redhat-actions/push-to-registry#readme
#      - name: Push Backup Container to registry
#        id: push-backup-image
#        uses: redhat-actions/push-to-registry@v2
#        with:
#          image: ${{ steps.build-backup-image.outputs.image }}
#          tags: ${{ steps.build-backup-image.outputs.tags }}
#          registry: ${{ env.IMAGE_REGISTRY }}
#          username: ${{ env.IMAGE_REGISTRY_USER }}
#          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
      # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

        # https://github.com/redhat-actions/oc-login#readme
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          chmod +x openshift/.pipeline/deploy.sh
          openshift/.pipeline/deploy.sh
